name: Docker Build with Cache

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: false

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx (for multi-platform & cache)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub (optional, remove if not pushing)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set IMAGE_TAG for push events
        if: github.event_name == 'push'
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set IMAGE_TAG for dispatch events
        if: github.event_name == 'workflow_dispatch'
        run: echo "IMAGE_TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      # Build and push Docker image with cache
      - name: Build and push Docker image (push)
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ayesa-java-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/ayesa-java-api:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}

      - name: Trigger workflow in other repo
        uses: actions/github-script@v8
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'nachomillangarcia',
              repo: 'formadoresit-ayesa',
              workflow_id: 'deploy-java-api.yaml',
              ref: 'main',
              inputs: {
                tag_name: '${{ env.IMAGE_TAG }}'
              }
            });
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}